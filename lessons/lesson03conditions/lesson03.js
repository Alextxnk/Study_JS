'use strict'; // это директива появилась в спецификации ES5, она указывает браузеру, что нужно обрабатывать код 
// по современным правилам, во-первых строгий режим исправляет ошибки, устраняет слабыем места в javascript, 
// упрощает отладку кода и увеличивет безопасность, код становится более оптимизированным, некоторые элементы 
// синтаксиса перестают работать в строгом режиме, т.к. это могло вызвать ошибки в некоторых браузерах 

// Преобразование типов данных, ветвление 

// confirm(); // метод ввода для пользователя, он выдаст модальное окно с двумя кнопками
// этот метод возвращает boolean значение, в зависимости от нажатой кнопки пользователем  

// let question = confirm('Ты точно программист?');
// console.log(question); // true | false 

// let anotherQuestion = prompt('Сколько тебе лет?', '19'); // вторым агументом записано дефолтное значение 
// console.log(anotherQuestion); // окно с инпутом, при отмене получаем null


// Преобразование типов данных

// Javascript является языком с динамическим типом данных, если интерпретатор ожидает увидеть значение 
// определенного типа, то значение будет автоматически приведено к этому типу, например если один из 
// операндов оператора + является строка, то второй будет тоже преобразован в строку и будет выполнена 
// операциия конкатинации  

console.log(5 + '5'); // 55 приводит к строке 

// остальные три операции приводят к числу 
console.log(5 - '5'); // 0
console.log(5 * '5'); // 25
console.log(5 / '5'); // 1

// конструкторы преобразования типов данных 
console.log(Boolean(5)); // true
console.log(!!'5'); // true

console.log(String(10)); // получим строку '10' 
console.log(String([1, 2, 3])); // получим строку '1, 2, 3'
console.log(10 + ''); // получим строку '10'

// метод toString работает только с числами и boolean значениями 
//console.log(10 .toString()); // получим строку '10'
//console.log(10..toString()); // получим строку '10', можно вместо пробела ставить точку 

// либо можно с помощью переменной 
let x = 5;
console.log(x.toString());


console.log(typeof Number('33')); // получим число 33 
console.log(typeof + '33'); // получим число 33 

// let anotherQuestion = +prompt('Сколько тебе лет?', '19'); // благодаря тернарному оператору + будем получать 
// на выход число, а не строку 
// console.log(typeof anotherQuestion);

// 9.55 обратить внимание на видео с prompt данные неободимо преобразовывать к нужному типу 

let n = '10';
n *= 1;
console.log(typeof n); // number

// мягкое преобразование при помощи глобальных функций parseInt и parseFloat
console.log(parseInt('10')); // вторым параметром принимат систему счисления 
console.log(parseFloat('10.5'));



// ветвления в javascript
// Ветвление - это выполнение определенного набора команд в случае истинности | ложности логического выражения 

let y = 5;

if (y === 5) {
   console.log('yes');
} else {
   console.log('no');
}

switch (y) {
   case 2:
   case 3:
   case 4:
      console.log('2-4');
      break;
   case 5:
      console.log(5);
      break;
   default:
      console.log(111);
}

// тернарный оператор 
let result = true ? 1 : 0;
console.log('result: ', result);

let num = y === 5 ? 'верно' : 'не верно';
console.log('result: ', num);
