'use strict';


// API DOM
// API - Application Programming Interface
// API - это набор доступных свойств и методов для решения задачи, чаще всего они реализованы в виде объекта 

// первое API, с которым мы будем работать - это DOM - Document Object Model
// DOM необходим для работы с элементами на странице, 
// с помощью него мы будем создавать элементы, добавлять и изменять их


// следующий API - BOM - Browser Object Model, он необходим для работы с браузером 

// также будем работать с XML HTTP request - это специальный объект, 
// который нам позволяет работать с сервером, делает запросы к нему 



// сегодня изучим DOM

// когда вы открывете браузер, и у вас есть множество элементов, 
// которые описаны HTML версткой: теги, атрибуты, значения этих атрибутов, текст внутри тегов
// это все объекты DOM

// нам необходимо научиться работать с этими элементами, 
// но к сожалению javascript не умеет работать с HTML кодом напрямую,
// он не может прочитать теги в виде текста  

// на помощь приходит DOM - API браузера, которое собирает HTML структуру в
// объект document 

// движок javascript в браузере, чтоб получить объектную модель документа,
// каждый элемент на странице переводит в объект 

// например: вы создали div - он создает объект, вы напишите текст внутри этого div, 
// он создаст соответсвующую ноду - node (узел), так строится целое дерево объектов DOM

// из чего состоит это дерево - узел (на картинке синим цветом): подразделяются на родителя и дочерний элемент 
// родитель - это элемент из которого растет дерево, дети растут из узла - из родителя 

// также есть корень - элемент из которого растет все дерево, он всегда один у него нет родителей 
// и листья (на картинке зеленым цветом) - это элементы у которых нет детей 


// какой объект является корневым?

// многие отвечают HTML, но на самом деле это не так, корнем является объект document, 
// он описывает открытую странцу в браузере, от него растет все дерево,
// в него попадает вся структура, включая doctype, <html> и все остальные теги, 
// переносы, строки, табуляции и даже комментарии  

// для чего нам нужно DOM дерево?

// первое и самое основное - поиск элементов на странице 
/* 
console.log(document); // выводится вся структура документа 

// можем проверить, есть ли у документа родители, является ли он корнем  
console.log(document.parentElement); // null
// получили, что у документа родителей нет - он является корневым 

console.log(document.children); // можем посмотреть его дочерние элементы 
// у него дочерний элемент html 
// html коллекция - это псевдомассив, о котором мы говорили ранее,
// в нем есть объекты html, которые содержат: атрибуты, детей и множество свойств, если его раскрыть  

// как мы будем искать элементы на странице? 

// для этого в document есть встроенные методы для поиска элементов 

console.log(document.getElementById('main')); // обращаемся к элементу по id 
// когда нам необходимо получить элемент, у которого есть id или мы можем сами задать id
// лучше всего использовать этот метод 

// другие способы 
console.log(document.getElementsByTagName('h1')); // так мы получаем колллекцию

console.log(document.getElementsByTagName('h1')[0]); // а так мы получаем конкретный элемент, по его индексу 

console.log(document.getElementsByClassName('header1')[0]); // получаем элемент по классу 


// когда нам необходимо получить один элемент по селектору, классу, тегу и т.д. 
// лучше использовать метод querySelector
// он получит самый первый элемент с таким классом, который встретится в DOM дереве 
console.log(document.querySelector('head')); // так получаем по тегу
console.log(document.querySelector('.header1')); // а так по классу 
// с помощью этой точки так же, как и в CSS мы обращаемся к классам 
console.log(document.querySelector('#main')); // а так получаем по id
// для id лучше использовать метод getElementById
console.log(document.querySelector('[title="Основной заголовок"]')); // получение по атрибуту 

// если необходимо получить все элементы, есть другой метод - querySelectorAll
console.log(document.querySelectorAll('div')); // получаем NodeList - это тоже коллекция,
// которая будет содержать все элементы с таким тегом  */



// что мы можем делать с полученными элементами? 
// как мы можем этими элементами управлять?

let mainHead = document.querySelector('.header1');
console.log('mainHead:', mainHead);
// каждый элемент, который мы получили - это объект и эти объекты имеют свои методы и свойства
// и если мы будем использовать console.dir - мы получим множество свойств, методов
// с помощью метода getAttribute мы можем получать атрибуты 
console.dir(mainHead.getAttribute('title')); // получение атрибута в консоли 


// можем изменять или добавлять атрибуты с помощью метода setAttribute
// первым параметром добавляем атрибут, а вторым значение этого атрибута 
// этот метод принимает только два параметра 
mainHead.setAttribute('title', 'Новый title'); // изменим атрибут  
mainHead.setAttribute('style', 'color:blue'); // добавили новый атрибут 

console.log(mainHead);

// все наши элементы - это объекты и многие атрибуты по-умолчанию являются уже свойствами нашего элемента 
// например, мы можем сразу получить наш title без всяких других методов 

console.log(mainHead.title); // Новый title

mainHead.title = 'Обновленный title'; // можем еще менять атрибуты 

console.log(mainHead.title); // Обновленный title


// но не все атрибуты будут называться также как в HTML, 
// например, чтобы получить класс нам необходимо написать:

console.log(mainHead.className); // т.к. слово class зарезервированно в javascript

// mainHead.className = 'head_red';

// console.log(mainHead.className);


// но есть один минус, старые классы становятся "затертыми", 
// поэтому мы будем использовать другой способ для работы с классами 

// будем использовать методы, которые содержатся в объекте classList
// этот метод хорош тем, что он добавляет класс, но не "затирает" остальные 

console.log(mainHead.classList);

// основные 4 метода, которые будем использовать: contains(), add(), remove(), toggle()

mainHead.classList.add('head_red'); // добавляет новый класс

console.log(mainHead.classList);

mainHead.classList.remove('header1'); // удаляет класс 

console.log(mainHead.classList);

// следующий метод делает проверку, есть ли класс у данного элемента и возвращает нам boolean значение 
console.log(mainHead.classList.contains('header1')); // false


// метод toggle

// он очень удобен, когда один раз кликаешь - получаешь один класс,
// второй раз - получаешь другой 
// этот метод "включает" и "выключает" заданные классы 

// mainHead.classList.toggle('head_red');
// mainHead.classList.toggle('head_black');


// теперь поработаем со стилями 
// для этого в DOM дереве есть уже свойство style 

mainHead.style.color = '#A93226';
mainHead.style.fontSize = '40px';

document.body.style.backgroundColor = '#D2B4DE';

// console.log(mainHead.style); // получаем объект, в котором все свойства CSS 


// как получать свойства, которые прописаны в CSS или из тега style? 
// напрямую мы их получить не можем 

// но можем получить те свойсва, которые уже вычислил браузер 
// для этого есть специальный метод, который возвращает объект сразу со всеми свойствами 


// функция getComputedStyle - это API, которое тоже встроено в браузере 
let computedStyleMainHead = getComputedStyle(mainHead, 'after'); // вторым параметром указываем,
// какой псевдоэлемент мы хотим получить 

// console.log(computedStyleMainHead);

// мы можем только получать свойства для чтения, но не можем менять их 

/* console.log(computedStyleMainHead.width);
console.log(computedStyleMainHead.margin);
console.log(computedStyleMainHead.fontSize);
console.log(computedStyleMainHead.fontFamily);
console.log(computedStyleMainHead.font); */

console.log(computedStyleMainHead.backgroundColor);


// еще замечание querySelector и querySelectorAll можно использовать не только на document,
// но и на самих элементах  

// например 

let hgroup = document.querySelector('hgroup');

let head = document.querySelectorAll('.head');
console.log(head);

// получает от элемента 
let hgroupHead = hgroup.querySelectorAll('.head');
console.log(hgroupHead);

// это особенность методов querySelector и querySelectorAll


// еще у нас есть вложенность селекторов 
let nestedHead = document.querySelectorAll('hgroup>.head'); // так записывается вложенность дочерних элементов 
// ('hgroup .head') - если просто внутри, то ставим пробел  
console.log(nestedHead);


// как работать с элементами - мы научились 
// в следующем уроке научимся их создавать, добавлять и перемещать, 
// тоесть управлять более глобально DOM деревом 


