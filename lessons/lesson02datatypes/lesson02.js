'use strict';

// Типы данных операторы, методы и свойства 

// объявили переменную
let myVar;

// 6 примитивных типов данных: 
// присваиваем переменным значения - инициализируем их
myVar = 10; // число
myVar = 'Hello world'; // строка
myVar = true; // логическое (булевое) boolean
myVar = null;
myVar = undefined;
myVar = Symbol(); // новый тип (появился в стандарте ES6), редко используется на практике и нужен для создания 
// уникальных идентификаторов имен, создать два одинаковых символа нельзя!, на курсе он использоваться не будет 

myVar = {}; // тип данных object, к нему относятся объектные типы данных:
// если на собеседовании спросят сколько типов данных в JS, смело отвечайте 7 типов данных 

console.log(typeof myVar); // оператор typeof - для определения типа выражения в JS, есть унарный оператор  
// typeof, он возвращает строку с описанием определения типа данных 


// все что ниже относится к типу данных объект - 7-й тип данных
// специальные типы:
let myArr = []; // массив
let regExp = /w+/g; // регулярное выражение
let func = function () {}; // функция
let error = Error('error message'); // ошибка
let date = new Date(); // объект дата


// null и undefined - оба обозначают отсутствие значения 
console.log(null > 0); // false
console.log(null === 0); // false
console.log(null >= 0); // true

// null - то чего не существует в коде, пустое или неизвестное значение, переводится как, пусто или ноль, иногда в 
// практике к переменной присвиается значение null, чтоб иметь пустую переменную 


// undefined обозначает, что значение полностью отсутсвует, если объявленна переменная, но в нее ничего не записано
// выведется undefined
// также при обращении к несущетсвующим элементам (массива, объекта...) выводится undefined

let myLet;
console.log('myLet: ', myLet); // undefined

let  arr = [1, 2, 3];
console.log('arr[5]: ', arr[5]); // undefined


// boolean - логический тип данных 
let myTrue = true;
let myFalse = false; 

console.log(2 === 2); // true
console.log(2 === 3); // false

// любое значение можно преобразовать в булевый тип с помощью конструктора булевого типа,  после преобразования 
// все значения будут принимать true  
console.log(Boolean(5)); // true 
console.log(Boolean('Hello')); // true 

// случаи, когда значение будет false
console.log(Boolean(0)); // false 
console.log(Boolean(undefined)); // false 
console.log(Boolean(null)); // false 
console.log(Boolean(NaN)); // false - Not a Number
console.log(Boolean('')); // false -  пустая строка 


// логические операторы, их три штуки (|| - логическое или , && - логическое и , ! - не)


// числа бывают целые, дробные(с плавающей точкой), экспоненциальные, двоичные, восмиричные, шестнадцатиричные  
console.log(typeof 50); // целые
console.log(typeof 8.5); // дробные, еще можно записывать вместо (0.5) просто (.5)
console.log(typeof 5e6); // экспоненциальные
console.log(typeof 0b1111); // двоичные, еще можно писать буквы в верзнем регистре (0B1111) - B
console.log(typeof 0o11); // восмиричные, старая запись (011), еще можно писать буквы в верзнем регистре (0O11) - O
console.log(typeof 0x22aacc); // шестнадцатиричные, еще можно писать буквы в верзнем регистре (0X22aacc) - X

// еще числа могут быть представленны глобальными свойствами 
console.log(typeof Infinity); // Бесконечность
console.log(typeof -Infinity); // -Бесконечность
console.log(typeof NaN);
// во всех console.log будет тип number 

// мы не получим ошибку, если выйдем за допустимый диапазон значения чисел, а получим Infinity или -Infinity
console.log(5 / 0); // Infinity, также если введем большое число  получим Infinity
console.log(-5 / 0); // -Infinity, также если введем большое отрицательное число  получим -Infinity

console.log(0 / 0); // NaN 
console.log(Infinity / Infinity); // NaN 
console.log('javascript' * 5); // NaN 


// арифметические операторы 
// унарные операторы
// унарный плюс и минус 
console.log(+5); // унарный + используетя для преобразования к типу number 
console.log(-5); // унарный - преобразует число в отрицательное 

// еще есть унарный инкремент и декремент, они бывают префиксные и постфиксные 
let i = 5;
console.log(++i); // 6
// префиксный инкремент, сначала увеличивает значение переменной на единицу, а потом уже возвращает  
console.log(i++); // 5
console.log(i); // 6
// постфикный инкремент, сначала возвращает текущее значение, а потом увеличивает его на единицу  

console.log(--i); // 4
// префиксный декремент, сначала уменьшает значение переменной на единицу, а потом уже возвращает  
console.log(i--); // 5
console.log(i); // 4
// постфикный декремент, сначала возвращает текущее значение, а потом уменьшает его на единицу 


// бинарные операторы 
console.log(3 + 4); // сложение
console.log(4 - 3); // вычитание 
console.log(2 * 3); // умножение
console.log(9 / 2); // деление 
console.log(9 % 2); // остаток от деления 

// присваивание с операцией 
let n = 15;
n += 3;
console.log('n = ', n);
n -= 6;
console.log('n = ', n);
n /= 3;
console.log('n = ', n);
n *= 2;
console.log('n = ', n);


// операторы сравнения 
console.log(3 > 2);
console.log(3 < 2);
console.log(5 >= 3);
console.log(10 <= 5);
console.log(5 === 5); // строгое равентсво, без приведения типов 
console.log(5 !== 6); // строгое неравентсво, без приведения типов 
console.log(5 == '5'); // не строгое равентсво (можем сравнивать числа со строками, т.к. преобразуются типы) 
console.log(5 != '6'); // не строгое неравентсво (можем сравнивать числа со строками, т.к. преобразуются типы) 
// на практике лучше использовать строгие равентсво и неравенство

// для более сложных математических операций есть объект Math, который содержит математические методы 
console.log(Math.sqrt(25)); // 5, корень из числа 
console.log(Math.pow(5, 3)); // 125, возведение в степень, также можно возводить в степень вот так 5**3  

// метод для проверки: является ли число целым 
console.log(Number.isInteger(5)); // true
console.log(Number.isInteger(5.5)); // false


// строки 
// можно использовать как одинарные кавычки, так и двойные, разницы нет, но единственное нужно привыкнуть к одному 
// стилю и использовать его  
let myString = 'Hello world! ';
let myStr = "Hello my friends!";
console.log('\t Hello \n "my" friends!'); // в таком случае нужно использовать разные кавычки 
// \t - табуляция \n - перенос строки 
console.log("Hello \"my\" friends!"); // одинаковые кавычки можно экранировать с помощью обратного слеша 

console.log('Hello ' + 'world!'); // оператор конкатенации - склеивает строки, интерпретатор javascripit понимает, 
// что это оператор конкатенации, если один из операндов является строкой 

let str = 'Hello my Friends!';
console.log(myString + str); // Hello world! Hello my Friends!

// популярные методы и свойства строк 
console.log(str.length); // 17
console.log(str.toUpperCase()); // HELLO MY FRIENDS!
console.log(str.toLowerCase()); // hello my friends!

// старый способ
console.log(str.charAt(0)); // H
console.log(str.charAt(1)); // e

// современный способ
console.log(str[0]); // H
console.log(str[1]); // e

// эти методы не меняют исходную строку, они возвращают новую 
console.log(str.substring(6)); // my Friends! возвращает подстроку, с указанного индекса и до конца строки 
console.log(str.substring(9, 15)); // Friend

console.log(str.slice(6)); // 
console.log(str.slice(-8)); // возвращает с конца 
console.log(str.substr(6, 5)); // с какого начинаем, сколько хотим вернуть 

console.log(str.indexOf('Friends')); // 9, нужен для поиска подстроки, вернет индекс первого символа 
// из найденной подстроки  

console.log(str.replace('my Friends', 'world')); // делает замену подстроки 

console.log(str.split(' ')); // это метод, который разбивает строку на массив, нам необходимо указать 
// только разделитель ' ' и в итоге получим массив с тремя элементами ['Hello', 'my', 'Friends!']

let fuits = 'apple, kiwi, orange';
console.log(fuits.split(', ')); // ['apple', 'kiwi', 'orange'] разделитель ', '
